// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageI is a mock of StorageI interface.
type MockStorageI struct {
	ctrl     *gomock.Controller
	recorder *MockStorageIMockRecorder
}

// MockStorageIMockRecorder is the mock recorder for MockStorageI.
type MockStorageIMockRecorder struct {
	mock *MockStorageI
}

// NewMockStorageI creates a new mock instance.
func NewMockStorageI(ctrl *gomock.Controller) *MockStorageI {
	mock := &MockStorageI{ctrl: ctrl}
	mock.recorder = &MockStorageIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageI) EXPECT() *MockStorageIMockRecorder {
	return m.recorder
}

// CheckInBlackList mocks base method.
func (m *MockStorageI) CheckInBlackList(ctx context.Context, ip net.IP) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInBlackList", ctx, ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInBlackList indicates an expected call of CheckInBlackList.
func (mr *MockStorageIMockRecorder) CheckInBlackList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInBlackList", reflect.TypeOf((*MockStorageI)(nil).CheckInBlackList), ctx, ip)
}

// CheckInWhiteList mocks base method.
func (m *MockStorageI) CheckInWhiteList(ctx context.Context, ip net.IP) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInWhiteList", ctx, ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInWhiteList indicates an expected call of CheckInWhiteList.
func (mr *MockStorageIMockRecorder) CheckInWhiteList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInWhiteList", reflect.TypeOf((*MockStorageI)(nil).CheckInWhiteList), ctx, ip)
}

// ClearLists mocks base method.
func (m *MockStorageI) ClearLists(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearLists", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearLists indicates an expected call of ClearLists.
func (mr *MockStorageIMockRecorder) ClearLists(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearLists", reflect.TypeOf((*MockStorageI)(nil).ClearLists), ctx)
}

// CreateSubnetInBlackList mocks base method.
func (m *MockStorageI) CreateSubnetInBlackList(ctx context.Context, ipNet *net.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetInBlackList", ctx, ipNet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubnetInBlackList indicates an expected call of CreateSubnetInBlackList.
func (mr *MockStorageIMockRecorder) CreateSubnetInBlackList(ctx, ipNet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetInBlackList", reflect.TypeOf((*MockStorageI)(nil).CreateSubnetInBlackList), ctx, ipNet)
}

// CreateSubnetInWhiteList mocks base method.
func (m *MockStorageI) CreateSubnetInWhiteList(ctx context.Context, ipNet *net.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubnetInWhiteList", ctx, ipNet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubnetInWhiteList indicates an expected call of CreateSubnetInWhiteList.
func (mr *MockStorageIMockRecorder) CreateSubnetInWhiteList(ctx, ipNet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubnetInWhiteList", reflect.TypeOf((*MockStorageI)(nil).CreateSubnetInWhiteList), ctx, ipNet)
}

// DeleteSubnetInBlackList mocks base method.
func (m *MockStorageI) DeleteSubnetInBlackList(ctx context.Context, ipNet *net.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetInBlackList", ctx, ipNet)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnetInBlackList indicates an expected call of DeleteSubnetInBlackList.
func (mr *MockStorageIMockRecorder) DeleteSubnetInBlackList(ctx, ipNet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetInBlackList", reflect.TypeOf((*MockStorageI)(nil).DeleteSubnetInBlackList), ctx, ipNet)
}

// DeleteSubnetInWhiteList mocks base method.
func (m *MockStorageI) DeleteSubnetInWhiteList(ctx context.Context, ipNet *net.IPNet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubnetInWhiteList", ctx, ipNet)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubnetInWhiteList indicates an expected call of DeleteSubnetInWhiteList.
func (mr *MockStorageIMockRecorder) DeleteSubnetInWhiteList(ctx, ipNet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubnetInWhiteList", reflect.TypeOf((*MockStorageI)(nil).DeleteSubnetInWhiteList), ctx, ipNet)
}

// ExistsSubnetInBlackList mocks base method.
func (m *MockStorageI) ExistsSubnetInBlackList(ctx context.Context, ipNet *net.IPNet) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsSubnetInBlackList", ctx, ipNet)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsSubnetInBlackList indicates an expected call of ExistsSubnetInBlackList.
func (mr *MockStorageIMockRecorder) ExistsSubnetInBlackList(ctx, ipNet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsSubnetInBlackList", reflect.TypeOf((*MockStorageI)(nil).ExistsSubnetInBlackList), ctx, ipNet)
}

// ExistsSubnetInWhiteList mocks base method.
func (m *MockStorageI) ExistsSubnetInWhiteList(ctx context.Context, ipNet *net.IPNet) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsSubnetInWhiteList", ctx, ipNet)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsSubnetInWhiteList indicates an expected call of ExistsSubnetInWhiteList.
func (mr *MockStorageIMockRecorder) ExistsSubnetInWhiteList(ctx, ipNet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsSubnetInWhiteList", reflect.TypeOf((*MockStorageI)(nil).ExistsSubnetInWhiteList), ctx, ipNet)
}

// MockLeakyBucketI is a mock of LeakyBucketI interface.
type MockLeakyBucketI struct {
	ctrl     *gomock.Controller
	recorder *MockLeakyBucketIMockRecorder
}

// MockLeakyBucketIMockRecorder is the mock recorder for MockLeakyBucketI.
type MockLeakyBucketIMockRecorder struct {
	mock *MockLeakyBucketI
}

// NewMockLeakyBucketI creates a new mock instance.
func NewMockLeakyBucketI(ctrl *gomock.Controller) *MockLeakyBucketI {
	mock := &MockLeakyBucketI{ctrl: ctrl}
	mock.recorder = &MockLeakyBucketIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeakyBucketI) EXPECT() *MockLeakyBucketIMockRecorder {
	return m.recorder
}

// CheckIP mocks base method.
func (m *MockLeakyBucketI) CheckIP(ctx context.Context, ip net.IP) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIP", ctx, ip)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIP indicates an expected call of CheckIP.
func (mr *MockLeakyBucketIMockRecorder) CheckIP(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIP", reflect.TypeOf((*MockLeakyBucketI)(nil).CheckIP), ctx, ip)
}

// CheckLogin mocks base method.
func (m *MockLeakyBucketI) CheckLogin(ctx context.Context, login string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLogin", ctx, login)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLogin indicates an expected call of CheckLogin.
func (mr *MockLeakyBucketIMockRecorder) CheckLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLogin", reflect.TypeOf((*MockLeakyBucketI)(nil).CheckLogin), ctx, login)
}

// CheckPassword mocks base method.
func (m *MockLeakyBucketI) CheckPassword(ctx context.Context, pwd string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPassword", ctx, pwd)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPassword indicates an expected call of CheckPassword.
func (mr *MockLeakyBucketIMockRecorder) CheckPassword(ctx, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockLeakyBucketI)(nil).CheckPassword), ctx, pwd)
}

// ResetIP mocks base method.
func (m *MockLeakyBucketI) ResetIP(ctx context.Context, ip net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetIP", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetIP indicates an expected call of ResetIP.
func (mr *MockLeakyBucketIMockRecorder) ResetIP(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetIP", reflect.TypeOf((*MockLeakyBucketI)(nil).ResetIP), ctx, ip)
}

// ResetLogin mocks base method.
func (m *MockLeakyBucketI) ResetLogin(ctx context.Context, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLogin", ctx, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetLogin indicates an expected call of ResetLogin.
func (mr *MockLeakyBucketIMockRecorder) ResetLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLogin", reflect.TypeOf((*MockLeakyBucketI)(nil).ResetLogin), ctx, login)
}

// ResetPassword mocks base method.
func (m *MockLeakyBucketI) ResetPassword(ctx context.Context, pwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", ctx, pwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockLeakyBucketIMockRecorder) ResetPassword(ctx, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockLeakyBucketI)(nil).ResetPassword), ctx, pwd)
}
